/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.amuraru.opencensus.spark;

import com.codahale.metrics.MetricRegistry;
import com.github.amuraru.opencensus.metrics5.Metrics5Adapter;
import io.opencensus.exporter.stats.prometheus.PrometheusStatsCollector;
import io.prometheus.client.exporter.HTTPServer;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.Collections;
import java.util.Optional;
import java.util.Properties;
import org.apache.spark.SparkConf;
import org.apache.spark.SparkEnv;
import org.apache.spark.SparkEnv$;
import org.apache.spark.metrics.sink.Sink;

public class OpenCensusSink implements Sink {

  private final OpenCensusReporter reporter;

  public OpenCensusSink(
      Properties properties, MetricRegistry registry, org.apache.spark.SecurityManager manager)
      throws MalformedURLException {
    this.reporter = new OpenCensusReporter(properties, registry);
  }

  @Override
  public void start() {
    try {
      this.reporter.start();
    } catch (IOException e) {
      throw new IllegalStateException("Failed to start OpenCensusSink sink", e);
    }
  }

  @Override
  public void stop() {
    this.reporter.stop();
  }

  @Override
  public void report() {}

  class OpenCensusReporter {
    io.prometheus.client.exporter.HTTPServer server;
    private SparkConf defaultSparkConf;
    private MetricRegistry registry;

    OpenCensusReporter(Properties properties, MetricRegistry registry) {
      this.defaultSparkConf = new SparkConf(true);
      this.registry = registry;
    }

    private Optional<SparkConf> getSparkConf() {
      SparkEnv env = SparkEnv$.MODULE$.get();
      if (env == null) {
        return Optional.empty();
      } else {
        SparkConf conf = env.conf();
        return Optional.of(conf);
      }
    }

    void start() throws IOException {
      Metrics5Adapter metrics5Adapter = new Metrics5Adapter(registry);
      // Hook the Dropwizard registry into the OpenCensus registry
      // via the DropWizardMetrics metric producer.
      io.opencensus.metrics.Metrics.getExportComponent()
          .getMetricProducerManager()
          .add(
              new io.opencensus.contrib.dropwizard5.DropWizardMetrics(
                  Collections.singletonList(metrics5Adapter)));

      // Create a PrometheusStatsCollector and registers it to the default Prometheus registry.
      PrometheusStatsCollector.createAndRegister();
      // Prometheus HTTPServer to export metrics.
      server = new HTTPServer("localhost", 29999 , true);
    }

    void stop() {
      if (server != null) {
        server.stop();
      }
    }
  }
}
